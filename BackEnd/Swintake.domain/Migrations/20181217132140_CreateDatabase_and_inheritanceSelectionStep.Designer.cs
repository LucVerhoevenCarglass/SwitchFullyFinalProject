// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swintake.domain.Data;

namespace Swintake.domain.Migrations
{
    [DbContext(typeof(SwintakeContext))]
    [Migration("20181217132140_CreateDatabase_and_inheritanceSelectionStep")]
    partial class CreateDatabase_and_inheritanceSelectionStep
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Swintake.domain.Campaigns.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClassStartDate");

                    b.Property<string>("Client")
                        .HasMaxLength(60);

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasMaxLength(60);

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");

                    b.HasData(
                        new { Id = new Guid("da62dab3-73b8-41b3-8972-2fcc55c3689d"), ClassStartDate = new DateTime(2018, 12, 17, 14, 21, 38, 693, DateTimeKind.Local), Client = "CM", Comment = "cm comment", Name = "Java academy 2019", StartDate = new DateTime(2018, 12, 17, 14, 21, 38, 698, DateTimeKind.Local), Status = 1 }
                    );
                });

            modelBuilder.Entity("Swintake.domain.Candidates.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasMaxLength(60);

                    b.Property<string>("GitHubUsername")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasMaxLength(60);

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Candidates");

                    b.HasData(
                        new { Id = new Guid("64431092-fdff-4000-b495-c13bcf9a3aeb"), Comment = "", Email = "gwen.jamroziak@cegeka.com", FirstName = "Gween", GitHubUsername = "gwenjamroziak", LastName = "Jamroziak", LinkedIn = "gwenjamroziak", PhoneNumber = "0472697959" }
                    );
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CampaignId");

                    b.Property<Guid>("CandidateId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CandidateId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.SelectionStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<string>("Description")
                        .HasMaxLength(90);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("SelectionStep");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SelectionStep");
                });

            modelBuilder.Entity("Swintake.domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = new Guid("863dd40e-2a7e-44a4-8db8-6bb5dcdf21dc"), Email = "reinout@switchfully.com", FirstName = "Reinout" },
                        new { Id = new Guid("ca8f09b6-e727-40f9-8945-f3959308b096"), Email = "niels@switchfully.com", FirstName = "Niels" }
                    );
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.CvScreening", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("CvScreening");

                    b.HasDiscriminator().HasValue("CvScreening");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.FinalDecision", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("FinalDecision");

                    b.HasDiscriminator().HasValue("FinalDecision");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.FirstInterview", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("FirstInterview");

                    b.HasDiscriminator().HasValue("FirstInterview");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.GroupInterview", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("GroupInterview");

                    b.HasDiscriminator().HasValue("GroupInterview");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.PhoneScreening", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("PhoneScreening");

                    b.HasDiscriminator().HasValue("PhoneScreening");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.SelectionSteps.TestResult", b =>
                {
                    b.HasBaseType("Swintake.domain.JobApplications.SelectionSteps.SelectionStep");


                    b.ToTable("TestResult");

                    b.HasDiscriminator().HasValue("TestResult");
                });

            modelBuilder.Entity("Swintake.domain.JobApplications.JobApplication", b =>
                {
                    b.HasOne("Swintake.domain.Campaigns.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Swintake.domain.Candidates.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Swintake.domain.Users.User", b =>
                {
                    b.OwnsOne("Swintake.domain.Users.UserSecurity", "UserSecurity", b1 =>
                        {
                            b1.Property<Guid?>("UserId");

                            b1.Property<string>("AppliedSalt")
                                .HasColumnName("AppliedSalt");

                            b1.Property<string>("PasswordHashedAndSalted")
                                .HasColumnName("PasswordHashed");

                            b1.ToTable("Users");

                            b1.HasOne("Swintake.domain.Users.User")
                                .WithOne("UserSecurity")
                                .HasForeignKey("Swintake.domain.Users.UserSecurity", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { UserId = new Guid("863dd40e-2a7e-44a4-8db8-6bb5dcdf21dc"), AppliedSalt = "NgBFEGiYlnKAVlAkBj6Qkg==", PasswordHashedAndSalted = "p1irTnDYNZBcCOfoph9UZaEmX5h4kd/UqkofgCUMMrA=" },
                                new { UserId = new Guid("ca8f09b6-e727-40f9-8945-f3959308b096"), AppliedSalt = "rODZhnBsLGRP908sBZiXzg==", PasswordHashedAndSalted = "TeBgBijhTG1++pvIvcEOd0hvSGBE1Po1kh6TFlW097w=" }
                            );
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
